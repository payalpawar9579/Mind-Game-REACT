{"ast":null,"code":"var _jsxFileName = \"/Users/payal/Desktop/MindGame/client/src/components/ThreeBackground.jsx\",\n  _s = $RefreshSig$();\n// ThreeBackground.jsx\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { StereoEffect } from 'three/addons/effects/StereoEffect.js';\nimport backgroundImage from '../images/allbg.png'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeBackground = () => {\n  _s();\n  useEffect(() => {\n    let container, camera, scene, renderer, effect;\n    const spheres = [];\n    let mouseX = 0,\n      mouseY = 0;\n    let windowHalfX = window.innerWidth / 2;\n    let windowHalfY = window.innerHeight / 2;\n    function onDocumentMouseMove(event) {\n      mouseX = (event.clientX - windowHalfX) * 10;\n      mouseY = (event.clientY - windowHalfY) * 10;\n    }\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      effect.setSize(window.innerWidth, window.innerHeight);\n    }\n    function animate() {\n      const timer = 0.0001 * Date.now();\n      camera.position.x += (mouseX - camera.position.x) * 0.05;\n      camera.position.y += (-mouseY - camera.position.y) * 0.05;\n      camera.lookAt(scene.position);\n      for (let i = 0, il = spheres.length; i < il; i++) {\n        const sphere = spheres[i];\n        sphere.position.x = 5000 * Math.cos(timer + i);\n        sphere.position.y = 5000 * Math.sin(timer + i * 1.1);\n      }\n      effect.render(scene, camera);\n    }\n    function init() {\n      container = document.getElementById('three-container');\n\n      // Camera setup\n      camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 100000);\n      camera.position.z = 3200;\n\n      // Scene setup\n      scene = new THREE.Scene();\n      scene.background = new THREE.TextureLoader().load(backgroundImage);\n\n      // Sphere geometry and material setup\n      const geometry = new THREE.SphereGeometry(100, 32, 16);\n      const textureCube = new THREE.CubeTextureLoader().setPath('textures/cube/Park3Med/').load(['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg']);\n      textureCube.mapping = THREE.CubeRefractionMapping;\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        envMap: textureCube,\n        refractionRatio: 0.95\n      });\n\n      // Add spheres to the scene\n      for (let i = 0; i < 500; i++) {\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.x = Math.random() * 10000 - 5000;\n        mesh.position.y = Math.random() * 10000 - 5000;\n        mesh.position.z = Math.random() * 10000 - 5000;\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;\n        scene.add(mesh);\n        spheres.push(mesh);\n      }\n\n      // Add colorful point lights\n      const colors = [0xff0040, 0x0040ff, 0x80ff80, 0xffaa00, 0x00ffaa, 0xff1100];\n      colors.forEach((color, i) => {\n        const pointLight = new THREE.PointLight(color, 1.5, 5000);\n        pointLight.position.set(Math.sin(i / colors.length * Math.PI * 2) * 2500, Math.cos(i / colors.length * Math.PI * 2) * 2500, 1000);\n        scene.add(pointLight);\n      });\n\n      // Renderer setup\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      container.appendChild(renderer.domElement);\n\n      // Stereo effect setup\n      effect = new StereoEffect(renderer);\n      effect.setSize(window.innerWidth, window.innerHeight);\n\n      // Event listeners\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      window.addEventListener('resize', onWindowResize);\n\n      // Start animation\n      renderer.setAnimationLoop(animate);\n    }\n    init();\n\n    // Clean up event listeners and Three.js components\n    return () => {\n      document.removeEventListener('mousemove', onDocumentMouseMove);\n      window.removeEventListener('resize', onWindowResize);\n      renderer.dispose();\n      container.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"three-container\",\n    style: {\n      position: 'fixed',\n      width: '100vw',\n      height: '100vh',\n      zIndex: -1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeBackground, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeBackground;\nexport default ThreeBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeBackground\");","map":{"version":3,"names":["React","useEffect","THREE","StereoEffect","backgroundImage","jsxDEV","_jsxDEV","ThreeBackground","_s","container","camera","scene","renderer","effect","spheres","mouseX","mouseY","windowHalfX","window","innerWidth","windowHalfY","innerHeight","onDocumentMouseMove","event","clientX","clientY","onWindowResize","aspect","updateProjectionMatrix","setSize","animate","timer","Date","now","position","x","y","lookAt","i","il","length","sphere","Math","cos","sin","render","init","document","getElementById","PerspectiveCamera","z","Scene","background","TextureLoader","load","geometry","SphereGeometry","textureCube","CubeTextureLoader","setPath","mapping","CubeRefractionMapping","material","MeshBasicMaterial","color","envMap","refractionRatio","mesh","Mesh","random","scale","add","push","colors","forEach","pointLight","PointLight","set","PI","WebGLRenderer","setPixelRatio","devicePixelRatio","appendChild","domElement","addEventListener","setAnimationLoop","removeEventListener","dispose","removeChild","id","style","width","height","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/payal/Desktop/MindGame/client/src/components/ThreeBackground.jsx"],"sourcesContent":["// ThreeBackground.jsx\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { StereoEffect } from 'three/addons/effects/StereoEffect.js';\nimport backgroundImage from '../images/allbg.png'; // Adjust path as needed\n\nconst ThreeBackground = () => {\n  useEffect(() => {\n    let container, camera, scene, renderer, effect;\n    const spheres = [];\n    let mouseX = 0, mouseY = 0;\n    let windowHalfX = window.innerWidth / 2;\n    let windowHalfY = window.innerHeight / 2;\n\n    function onDocumentMouseMove(event) {\n      mouseX = (event.clientX - windowHalfX) * 10;\n      mouseY = (event.clientY - windowHalfY) * 10;\n    }\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      effect.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      const timer = 0.0001 * Date.now();\n      camera.position.x += (mouseX - camera.position.x) * 0.05;\n      camera.position.y += (-mouseY - camera.position.y) * 0.05;\n      camera.lookAt(scene.position);\n\n      for (let i = 0, il = spheres.length; i < il; i++) {\n        const sphere = spheres[i];\n        sphere.position.x = 5000 * Math.cos(timer + i);\n        sphere.position.y = 5000 * Math.sin(timer + i * 1.1);\n      }\n\n      effect.render(scene, camera);\n    }\n\n    function init() {\n      container = document.getElementById('three-container');\n\n      // Camera setup\n      camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 100000);\n      camera.position.z = 3200;\n\n      // Scene setup\n      scene = new THREE.Scene();\n      scene.background = new THREE.TextureLoader().load(backgroundImage);\n\n      // Sphere geometry and material setup\n      const geometry = new THREE.SphereGeometry(100, 32, 16);\n      const textureCube = new THREE.CubeTextureLoader()\n        .setPath('textures/cube/Park3Med/')\n        .load(['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg']);\n      textureCube.mapping = THREE.CubeRefractionMapping;\n\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        envMap: textureCube,\n        refractionRatio: 0.95,\n      });\n\n      // Add spheres to the scene\n      for (let i = 0; i < 500; i++) {\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.x = Math.random() * 10000 - 5000;\n        mesh.position.y = Math.random() * 10000 - 5000;\n        mesh.position.z = Math.random() * 10000 - 5000;\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;\n        scene.add(mesh);\n        spheres.push(mesh);\n      }\n\n      // Add colorful point lights\n      const colors = [0xff0040, 0x0040ff, 0x80ff80, 0xffaa00, 0x00ffaa, 0xff1100];\n      colors.forEach((color, i) => {\n        const pointLight = new THREE.PointLight(color, 1.5, 5000);\n        pointLight.position.set(\n          Math.sin((i / colors.length) * Math.PI * 2) * 2500,\n          Math.cos((i / colors.length) * Math.PI * 2) * 2500,\n          1000\n        );\n        scene.add(pointLight);\n      });\n\n      // Renderer setup\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      container.appendChild(renderer.domElement);\n\n      // Stereo effect setup\n      effect = new StereoEffect(renderer);\n      effect.setSize(window.innerWidth, window.innerHeight);\n\n      // Event listeners\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      window.addEventListener('resize', onWindowResize);\n\n      // Start animation\n      renderer.setAnimationLoop(animate);\n    }\n\n    init();\n\n    // Clean up event listeners and Three.js components\n    return () => {\n      document.removeEventListener('mousemove', onDocumentMouseMove);\n      window.removeEventListener('resize', onWindowResize);\n      renderer.dispose();\n      container.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div id=\"three-container\" style={{ position: 'fixed', width: '100vw', height: '100vh', zIndex: -1 }} />;\n};\n\nexport default ThreeBackground;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}